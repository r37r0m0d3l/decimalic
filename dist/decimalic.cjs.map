{"version":3,"file":"decimalic.cjs","sources":["../node_modules/decimal.js-light/decimal.mjs","../src/core/diff.mjs","../src/core/divide.mjs","../src/core/multiply.mjs","../src/core/sum.mjs"],"sourcesContent":["/*\r\n *  decimal.js-light v2.5.0\r\n *  An arbitrary-precision Decimal type for JavaScript.\r\n *  https://github.com/MikeMcl/decimal.js-light\r\n *  Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *  MIT Expat Licence\r\n */\r\n\r\n\r\n// ------------------------------------  EDITABLE DEFAULTS  ------------------------------------- //\r\n\r\n\r\n// The limit on the value of `precision`, and on the value of the first argument to\r\n// `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\nvar MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n\r\n  // The initial configuration properties of the Decimal constructor.\r\n  defaults = {\r\n\r\n    // These values must be integers within the stated ranges (inclusive).\r\n    // Most of these values can be changed during run-time using `Decimal.config`.\r\n\r\n    // The maximum number of significant digits of the result of a calculation or base conversion.\r\n    // E.g. `Decimal.config({ precision: 20 });`\r\n    precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n    // The rounding mode used by default by `toInteger`, `toDecimalPlaces`, `toExponential`,\r\n    // `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n    //\r\n    // ROUND_UP         0 Away from zero.\r\n    // ROUND_DOWN       1 Towards zero.\r\n    // ROUND_CEIL       2 Towards +Infinity.\r\n    // ROUND_FLOOR      3 Towards -Infinity.\r\n    // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    //\r\n    // E.g.\r\n    // `Decimal.rounding = 4;`\r\n    // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n    rounding: 4,                           // 0 to 8\r\n\r\n    // The exponent value at and beneath which `toString` returns exponential notation.\r\n    // JavaScript numbers: -7\r\n    toExpNeg: -7,                          // 0 to -MAX_E\r\n\r\n    // The exponent value at and above which `toString` returns exponential notation.\r\n    // JavaScript numbers: 21\r\n    toExpPos:  21,                         // 0 to MAX_E\r\n\r\n    // The natural logarithm of 10.\r\n    // 115 digits\r\n    LN10: '2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598298341967784042286'\r\n  },\r\n\r\n\r\n// ------------------------------------ END OF EDITABLE DEFAULTS -------------------------------- //\r\n\r\n\r\n  Decimal,\r\n  external = true,\r\n\r\n  decimalError = '[DecimalError] ',\r\n  invalidArgument = decimalError + 'Invalid argument: ',\r\n  exponentOutOfRange = decimalError + 'Exponent out of range: ',\r\n\r\n  mathfloor = Math.floor,\r\n  mathpow = Math.pow,\r\n\r\n  isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n  ONE,\r\n  BASE = 1e7,\r\n  LOG_BASE = 7,\r\n  MAX_SAFE_INTEGER = 9007199254740991,\r\n  MAX_E = mathfloor(MAX_SAFE_INTEGER / LOG_BASE),    // 1286742750677284\r\n\r\n  // Decimal.prototype object\r\n  P = {};\r\n\r\n\r\n// Decimal prototype methods\r\n\r\n\r\n/*\r\n *  absoluteValue                       abs\r\n *  comparedTo                          cmp\r\n *  decimalPlaces                       dp\r\n *  dividedBy                           div\r\n *  dividedToIntegerBy                  idiv\r\n *  equals                              eq\r\n *  exponent\r\n *  greaterThan                         gt\r\n *  greaterThanOrEqualTo                gte\r\n *  isInteger                           isint\r\n *  isNegative                          isneg\r\n *  isPositive                          ispos\r\n *  isZero\r\n *  lessThan                            lt\r\n *  lessThanOrEqualTo                   lte\r\n *  logarithm                           log\r\n *  minus                               sub\r\n *  modulo                              mod\r\n *  naturalExponential                  exp\r\n *  naturalLogarithm                    ln\r\n *  negated                             neg\r\n *  plus                                add\r\n *  precision                           sd\r\n *  squareRoot                          sqrt\r\n *  times                               mul\r\n *  toDecimalPlaces                     todp\r\n *  toExponential\r\n *  toFixed\r\n *  toInteger                           toint\r\n *  toNumber\r\n *  toPower                             pow\r\n *  toPrecision\r\n *  toSignificantDigits                 tosd\r\n *  toString\r\n *  valueOf                             val\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the absolute value of this Decimal.\r\n *\r\n */\r\nP.absoluteValue = P.abs = function () {\r\n  var x = new this.constructor(this);\r\n  if (x.s) x.s = 1;\r\n  return x;\r\n};\r\n\r\n\r\n/*\r\n * Return\r\n *   1    if the value of this Decimal is greater than the value of `y`,\r\n *  -1    if the value of this Decimal is less than the value of `y`,\r\n *   0    if they have the same value\r\n *\r\n */\r\nP.comparedTo = P.cmp = function (y) {\r\n  var i, j, xdL, ydL,\r\n    x = this;\r\n\r\n  y = new x.constructor(y);\r\n\r\n  // Signs differ?\r\n  if (x.s !== y.s) return x.s || -y.s;\r\n\r\n  // Compare exponents.\r\n  if (x.e !== y.e) return x.e > y.e ^ x.s < 0 ? 1 : -1;\r\n\r\n  xdL = x.d.length;\r\n  ydL = y.d.length;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n    if (x.d[i] !== y.d[i]) return x.d[i] > y.d[i] ^ x.s < 0 ? 1 : -1;\r\n  }\r\n\r\n  // Compare lengths.\r\n  return xdL === ydL ? 0 : xdL > ydL ^ x.s < 0 ? 1 : -1;\r\n};\r\n\r\n\r\n/*\r\n * Return the number of decimal places of the value of this Decimal.\r\n *\r\n */\r\nP.decimalPlaces = P.dp = function () {\r\n  var x = this,\r\n    w = x.d.length - 1,\r\n    dp = (w - x.e) * LOG_BASE;\r\n\r\n  // Subtract the number of trailing zeros of the last word.\r\n  w = x.d[w];\r\n  if (w) for (; w % 10 == 0; w /= 10) dp--;\r\n\r\n  return dp < 0 ? 0 : dp;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal divided by `y`, truncated to\r\n * `precision` significant digits.\r\n *\r\n */\r\nP.dividedBy = P.div = function (y) {\r\n  return divide(this, new this.constructor(y));\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n * by the value of `y`, truncated to `precision` significant digits.\r\n *\r\n */\r\nP.dividedToIntegerBy = P.idiv = function (y) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n  return round(divide(x, new Ctor(y), 0, 1), Ctor.precision);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n *\r\n */\r\nP.equals = P.eq = function (y) {\r\n  return !this.cmp(y);\r\n};\r\n\r\n\r\n/*\r\n * Return the (base 10) exponent value of this Decimal (this.e is the base 10000000 exponent).\r\n *\r\n */\r\nP.exponent = function () {\r\n  return getBase10Exponent(this);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n * false.\r\n *\r\n */\r\nP.greaterThan = P.gt = function (y) {\r\n  return this.cmp(y) > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n * otherwise return false.\r\n *\r\n */\r\nP.greaterThanOrEqualTo = P.gte = function (y) {\r\n  return this.cmp(y) >= 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is an integer, otherwise return false.\r\n *\r\n */\r\nP.isInteger = P.isint = function () {\r\n  return this.e > this.d.length - 2;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is negative, otherwise return false.\r\n *\r\n */\r\nP.isNegative = P.isneg = function () {\r\n  return this.s < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is positive, otherwise return false.\r\n *\r\n */\r\nP.isPositive = P.ispos = function () {\r\n  return this.s > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is 0, otherwise return false.\r\n *\r\n */\r\nP.isZero = function () {\r\n  return this.s === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThan = P.lt = function (y) {\r\n  return this.cmp(y) < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThanOrEqualTo = P.lte = function (y) {\r\n  return this.cmp(y) < 1;\r\n};\r\n\r\n\r\n/*\r\n * Return the logarithm of the value of this Decimal to the specified base, truncated to\r\n * `precision` significant digits.\r\n *\r\n * If no base is specified, return log[10](x).\r\n *\r\n * log[base](x) = ln(x) / ln(base)\r\n *\r\n * The maximum error of the result is 1 ulp (unit in the last place).\r\n *\r\n * [base] {number|string|Decimal} The base of the logarithm.\r\n *\r\n */\r\nP.logarithm = P.log = function (base) {\r\n  var r,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision,\r\n    wpr = pr + 5;\r\n\r\n  // Default base is 10.\r\n  if (base === void 0) {\r\n    base = new Ctor(10);\r\n  } else {\r\n    base = new Ctor(base);\r\n\r\n    // log[-b](x) = NaN\r\n    // log[0](x)  = NaN\r\n    // log[1](x)  = NaN\r\n    if (base.s < 1 || base.eq(ONE)) throw Error(decimalError + 'NaN');\r\n  }\r\n\r\n  // log[b](-x) = NaN\r\n  // log[b](0) = -Infinity\r\n  if (x.s < 1) throw Error(decimalError + (x.s ? 'NaN' : '-Infinity'));\r\n\r\n  // log[b](1) = 0\r\n  if (x.eq(ONE)) return new Ctor(0);\r\n\r\n  external = false;\r\n  r = divide(ln(x, wpr), ln(base, wpr), wpr);\r\n  external = true;\r\n\r\n  return round(r, pr);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal minus `y`, truncated to\r\n * `precision` significant digits.\r\n *\r\n */\r\nP.minus = P.sub = function (y) {\r\n  var x = this;\r\n  y = new x.constructor(y);\r\n  return x.s == y.s ? subtract(x, y) : add(x, (y.s = -y.s, y));\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal modulo `y`, truncated to\r\n * `precision` significant digits.\r\n *\r\n */\r\nP.modulo = P.mod = function (y) {\r\n  var q,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // x % 0 = NaN\r\n  if (!y.s) throw Error(decimalError + 'NaN');\r\n\r\n  // Return x if x is 0.\r\n  if (!x.s) return round(new Ctor(x), pr);\r\n\r\n  // Prevent rounding of intermediate calculations.\r\n  external = false;\r\n  q = divide(x, y, 0, 1).times(y);\r\n  external = true;\r\n\r\n  return x.minus(q);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n * i.e. the base e raised to the power the value of this Decimal, truncated to `precision`\r\n * significant digits.\r\n *\r\n */\r\nP.naturalExponential = P.exp = function () {\r\n  return exp(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n * truncated to `precision` significant digits.\r\n *\r\n */\r\nP.naturalLogarithm = P.ln = function () {\r\n  return ln(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n * -1.\r\n *\r\n */\r\nP.negated = P.neg = function () {\r\n  var x = new this.constructor(this);\r\n  x.s = -x.s || 0;\r\n  return x;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal plus `y`, truncated to\r\n * `precision` significant digits.\r\n *\r\n */\r\nP.plus = P.add = function (y) {\r\n  var x = this;\r\n  y = new x.constructor(y);\r\n  return x.s == y.s ? add(x, y) : subtract(x, (y.s = -y.s, y));\r\n};\r\n\r\n\r\n/*\r\n * Return the number of significant digits of the value of this Decimal.\r\n *\r\n * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n *\r\n */\r\nP.precision = P.sd = function (z) {\r\n  var e, sd, w,\r\n    x = this;\r\n\r\n  if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n  e = getBase10Exponent(x) + 1;\r\n  w = x.d.length - 1;\r\n  sd = w * LOG_BASE + 1;\r\n  w = x.d[w];\r\n\r\n  // If non-zero...\r\n  if (w) {\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    for (; w % 10 == 0; w /= 10) sd--;\r\n\r\n    // Add the number of digits of the first word.\r\n    for (w = x.d[0]; w >= 10; w /= 10) sd++;\r\n  }\r\n\r\n  return z && e > sd ? e : sd;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of this Decimal, truncated to `precision`\r\n * significant digits.\r\n *\r\n */\r\nP.squareRoot = P.sqrt = function () {\r\n  var e, n, pr, r, s, t, wpr,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  // Negative or zero?\r\n  if (x.s < 1) {\r\n    if (!x.s) return new Ctor(0);\r\n\r\n    // sqrt(-x) = NaN\r\n    throw Error(decimalError + 'NaN');\r\n  }\r\n\r\n  e = getBase10Exponent(x);\r\n  external = false;\r\n\r\n  // Initial estimate.\r\n  s = Math.sqrt(+x);\r\n\r\n  // Math.sqrt underflow/overflow?\r\n  // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n  if (s == 0 || s == 1 / 0) {\r\n    n = digitsToString(x.d);\r\n    if ((n.length + e) % 2 == 0) n += '0';\r\n    s = Math.sqrt(n);\r\n    e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n    if (s == 1 / 0) {\r\n      n = '1e' + e;\r\n    } else {\r\n      n = s.toExponential();\r\n      n = n.slice(0, n.indexOf('e') + 1) + e;\r\n    }\r\n\r\n    r = new Ctor(n);\r\n  } else {\r\n    r = new Ctor(s.toString());\r\n  }\r\n\r\n  pr = Ctor.precision;\r\n  s = wpr = pr + 3;\r\n\r\n  // Newton-Raphson iteration.\r\n  for (;;) {\r\n    t = r;\r\n    r = t.plus(divide(x, t, wpr + 2)).times(0.5);\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === (n = digitsToString(r.d)).slice(0, wpr)) {\r\n      n = n.slice(wpr - 3, wpr + 1);\r\n\r\n      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n      // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n      if (s == wpr && n == '4999') {\r\n\r\n        // On the first iteration only, check to see if rounding up gives the exact result as the\r\n        // nines may infinitely repeat.\r\n        round(t, pr + 1, 0);\r\n\r\n        if (t.times(t).eq(x)) {\r\n          r = t;\r\n          break;\r\n        }\r\n      } else if (n != '9999') {\r\n        break;\r\n      }\r\n\r\n      wpr += 4;\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return round(r, pr);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal times `y`, truncated to\r\n * `precision` significant digits.\r\n *\r\n */\r\nP.times = P.mul = function (y) {\r\n  var carry, e, i, k, r, rL, t, xdL, ydL,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    xd = x.d,\r\n    yd = (y = new Ctor(y)).d;\r\n\r\n  // Return 0 if either is 0.\r\n  if (!x.s || !y.s) return new Ctor(0);\r\n\r\n  y.s *= x.s;\r\n  e = x.e + y.e;\r\n  xdL = xd.length;\r\n  ydL = yd.length;\r\n\r\n  // Ensure xd points to the longer array.\r\n  if (xdL < ydL) {\r\n    r = xd;\r\n    xd = yd;\r\n    yd = r;\r\n    rL = xdL;\r\n    xdL = ydL;\r\n    ydL = rL;\r\n  }\r\n\r\n  // Initialise the result array with zeros.\r\n  r = [];\r\n  rL = xdL + ydL;\r\n  for (i = rL; i--;) r.push(0);\r\n\r\n  // Multiply!\r\n  for (i = ydL; --i >= 0;) {\r\n    carry = 0;\r\n    for (k = xdL + i; k > i;) {\r\n      t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n      r[k--] = t % BASE | 0;\r\n      carry = t / BASE | 0;\r\n    }\r\n\r\n    r[k] = (r[k] + carry) % BASE | 0;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; !r[--rL];) r.pop();\r\n\r\n  if (carry) ++e;\r\n  else r.shift();\r\n\r\n  y.d = r;\r\n  y.e = e;\r\n\r\n  return external ? round(y, Ctor.precision) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n *\r\n * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toDecimalPlaces = P.todp = function (dp, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  x = new Ctor(x);\r\n  if (dp === void 0) return x;\r\n\r\n  checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n  if (rm === void 0) rm = Ctor.rounding;\r\n  else checkInt32(rm, 0, 8);\r\n\r\n  return round(x, dp + getBase10Exponent(x) + 1, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in exponential notation rounded to\r\n * `dp` fixed decimal places using rounding mode `rounding`.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toExponential = function (dp, rm) {\r\n  var str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) {\r\n    str = toString(x, true);\r\n  } else {\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = round(new Ctor(x), dp + 1, rm);\r\n    str = toString(x, true, dp + 1);\r\n  }\r\n\r\n  return str;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n * omitted.\r\n *\r\n * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n * (-0).toFixed(3) is '0.000'.\r\n * (-0.5).toFixed(0) is '-0'.\r\n *\r\n */\r\nP.toFixed = function (dp, rm) {\r\n  var str, y,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) return toString(x);\r\n\r\n  checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n  if (rm === void 0) rm = Ctor.rounding;\r\n  else checkInt32(rm, 0, 8);\r\n\r\n  y = round(new Ctor(x), dp + getBase10Exponent(x) + 1, rm);\r\n  str = toString(y.abs(), false, dp + getBase10Exponent(y) + 1);\r\n\r\n  // To determine whether to add the minus sign look at the value before it was rounded,\r\n  // i.e. look at `x` rather than `y`.\r\n  return x.isneg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n * rounding mode `rounding`.\r\n *\r\n */\r\nP.toInteger = P.toint = function () {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n  return round(new Ctor(x), getBase10Exponent(x) + 1, Ctor.rounding);\r\n};\r\n\r\n\r\n/*\r\n * Return the value of this Decimal converted to a number primitive.\r\n *\r\n */\r\nP.toNumber = function () {\r\n  return +this;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal raised to the power `y`,\r\n * truncated to `precision` significant digits.\r\n *\r\n * For non-integer or very large exponents pow(x, y) is calculated using\r\n *\r\n *   x^y = exp(y*ln(x))\r\n *\r\n * The maximum error is 1 ulp (unit in last place).\r\n *\r\n * y {number|string|Decimal} The power to which to raise this Decimal.\r\n *\r\n */\r\nP.toPower = P.pow = function (y) {\r\n  var e, k, pr, r, sign, yIsInt,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    guard = 12,\r\n    yn = +(y = new Ctor(y));\r\n\r\n  // pow(x, 0) = 1\r\n  if (!y.s) return new Ctor(ONE);\r\n\r\n  x = new Ctor(x);\r\n\r\n  // pow(0, y > 0) = 0\r\n  // pow(0, y < 0) = Infinity\r\n  if (!x.s) {\r\n    if (y.s < 1) throw Error(decimalError + 'Infinity');\r\n    return x;\r\n  }\r\n\r\n  // pow(1, y) = 1\r\n  if (x.eq(ONE)) return x;\r\n\r\n  pr = Ctor.precision;\r\n\r\n  // pow(x, 1) = x\r\n  if (y.eq(ONE)) return round(x, pr);\r\n\r\n  e = y.e;\r\n  k = y.d.length - 1;\r\n  yIsInt = e >= k;\r\n  sign = x.s;\r\n\r\n  if (!yIsInt) {\r\n\r\n    // pow(x < 0, y non-integer) = NaN\r\n    if (sign < 0) throw Error(decimalError + 'NaN');\r\n\r\n  // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n  } else if ((k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n    r = new Ctor(ONE);\r\n\r\n    // Max k of 9007199254740991 takes 53 loop iterations.\r\n    // Maximum digits array length; leaves [28, 34] guard digits.\r\n    e = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n    external = false;\r\n\r\n    for (;;) {\r\n      if (k % 2) {\r\n        r = r.times(x);\r\n        truncate(r.d, e);\r\n      }\r\n\r\n      k = mathfloor(k / 2);\r\n      if (k === 0) break;\r\n\r\n      x = x.times(x);\r\n      truncate(x.d, e);\r\n    }\r\n\r\n    external = true;\r\n\r\n    return y.s < 0 ? new Ctor(ONE).div(r) : round(r, pr);\r\n  }\r\n\r\n  // Result is negative if x is negative and the last digit of integer y is odd.\r\n  sign = sign < 0 && y.d[Math.max(e, k)] & 1 ? -1 : 1;\r\n\r\n  x.s = 1;\r\n  external = false;\r\n  r = y.times(ln(x, pr + guard));\r\n  external = true;\r\n  r = exp(r);\r\n  r.s = sign;\r\n\r\n  return r;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n * the integer part of the value in normal notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toPrecision = function (sd, rm) {\r\n  var e, str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    e = getBase10Exponent(x);\r\n    str = toString(x, e <= Ctor.toExpNeg || e >= Ctor.toExpPos);\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = round(new Ctor(x), sd, rm);\r\n    e = getBase10Exponent(x);\r\n    str = toString(x, sd <= e || e <= Ctor.toExpNeg, sd);\r\n  }\r\n\r\n  return str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n * omitted.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toSignificantDigits = P.tosd = function (sd, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    sd = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n  }\r\n\r\n  return round(new Ctor(x), sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal.\r\n *\r\n * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n *\r\n */\r\nP.toString = P.valueOf = P.val = P.toJSON = P[Symbol.for('nodejs.util.inspect.custom')] = function () {\r\n  var x = this,\r\n    e = getBase10Exponent(x),\r\n    Ctor = x.constructor;\r\n\r\n  return toString(x, e <= Ctor.toExpNeg || e >= Ctor.toExpPos);\r\n};\r\n\r\n\r\n// Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n/*\r\n *  add                 P.minus, P.plus\r\n *  checkInt32          P.todp, P.toExponential, P.toFixed, P.toPrecision, P.tosd\r\n *  digitsToString      P.log, P.sqrt, P.pow, toString, exp, ln\r\n *  divide              P.div, P.idiv, P.log, P.mod, P.sqrt, exp, ln\r\n *  exp                 P.exp, P.pow\r\n *  getBase10Exponent   P.exponent, P.sd, P.toint, P.sqrt, P.todp, P.toFixed, P.toPrecision,\r\n *                      P.toString, divide, round, toString, exp, ln\r\n *  getLn10             P.log, ln\r\n *  getZeroString       digitsToString, toString\r\n *  ln                  P.log, P.ln, P.pow, exp\r\n *  parseDecimal        Decimal\r\n *  round               P.abs, P.idiv, P.log, P.minus, P.mod, P.neg, P.plus, P.toint, P.sqrt,\r\n *                      P.times, P.todp, P.toExponential, P.toFixed, P.pow, P.toPrecision, P.tosd,\r\n *                      divide, getLn10, exp, ln\r\n *  subtract            P.minus, P.plus\r\n *  toString            P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf\r\n *  truncate            P.pow\r\n *\r\n *  Throws:             P.log, P.mod, P.sd, P.sqrt, P.pow,  checkInt32, divide, round,\r\n *                      getLn10, exp, ln, parseDecimal, Decimal, config\r\n */\r\n\r\n\r\nfunction add(x, y) {\r\n  var carry, d, e, i, k, len, xd, yd,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision;\r\n\r\n  // If either is zero...\r\n  if (!x.s || !y.s) {\r\n\r\n    // Return x if y is zero.\r\n    // Return y if y is non-zero.\r\n    if (!y.s) y = new Ctor(x);\r\n    return external ? round(y, pr) : y;\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n\r\n  // x and y are finite, non-zero numbers with the same sign.\r\n\r\n  k = x.e;\r\n  e = y.e;\r\n  xd = xd.slice();\r\n  i = k - e;\r\n\r\n  // If base 1e7 exponents differ...\r\n  if (i) {\r\n    if (i < 0) {\r\n      d = xd;\r\n      i = -i;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = k;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n    k = Math.ceil(pr / LOG_BASE);\r\n    len = k > len ? k + 1 : len + 1;\r\n\r\n    if (i > len) {\r\n      i = len;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n    d.reverse();\r\n    for (; i--;) d.push(0);\r\n    d.reverse();\r\n  }\r\n\r\n  len = xd.length;\r\n  i = yd.length;\r\n\r\n  // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n  if (len - i < 0) {\r\n    i = len;\r\n    d = yd;\r\n    yd = xd;\r\n    xd = d;\r\n  }\r\n\r\n  // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n  for (carry = 0; i;) {\r\n    carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n    xd[i] %= BASE;\r\n  }\r\n\r\n  if (carry) {\r\n    xd.unshift(carry);\r\n    ++e;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n  for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n  y.d = xd;\r\n  y.e = e;\r\n\r\n  return external ? round(y, pr) : y;\r\n}\r\n\r\n\r\nfunction checkInt32(i, min, max) {\r\n  if (i !== ~~i || i < min || i > max) {\r\n    throw Error(invalidArgument + i);\r\n  }\r\n}\r\n\r\n\r\nfunction digitsToString(d) {\r\n  var i, k, ws,\r\n    indexOfLastWord = d.length - 1,\r\n    str = '',\r\n    w = d[0];\r\n\r\n  if (indexOfLastWord > 0) {\r\n    str += w;\r\n    for (i = 1; i < indexOfLastWord; i++) {\r\n      ws = d[i] + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n      str += ws;\r\n    }\r\n\r\n    w = d[i];\r\n    ws = w + '';\r\n    k = LOG_BASE - ws.length;\r\n    if (k) str += getZeroString(k);\r\n  } else if (w === 0) {\r\n    return '0';\r\n  }\r\n\r\n  // Remove trailing zeros of last w.\r\n  for (; w % 10 === 0;) w /= 10;\r\n\r\n  return str + w;\r\n}\r\n\r\n\r\nvar divide = (function () {\r\n\r\n  // Assumes non-zero x and k, and hence non-zero result.\r\n  function multiplyInteger(x, k) {\r\n    var temp,\r\n      carry = 0,\r\n      i = x.length;\r\n\r\n    for (x = x.slice(); i--;) {\r\n      temp = x[i] * k + carry;\r\n      x[i] = temp % BASE | 0;\r\n      carry = temp / BASE | 0;\r\n    }\r\n\r\n    if (carry) x.unshift(carry);\r\n\r\n    return x;\r\n  }\r\n\r\n  function compare(a, b, aL, bL) {\r\n    var i, r;\r\n\r\n    if (aL != bL) {\r\n      r = aL > bL ? 1 : -1;\r\n    } else {\r\n      for (i = r = 0; i < aL; i++) {\r\n        if (a[i] != b[i]) {\r\n          r = a[i] > b[i] ? 1 : -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n  function subtract(a, b, aL) {\r\n    var i = 0;\r\n\r\n    // Subtract b from a.\r\n    for (; aL--;) {\r\n      a[aL] -= i;\r\n      i = a[aL] < b[aL] ? 1 : 0;\r\n      a[aL] = i * BASE + a[aL] - b[aL];\r\n    }\r\n\r\n    // Remove leading zeros.\r\n    for (; !a[0] && a.length > 1;) a.shift();\r\n  }\r\n\r\n  return function (x, y, pr, dp) {\r\n    var cmp, e, i, k, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0, yL, yz,\r\n      Ctor = x.constructor,\r\n      sign = x.s == y.s ? 1 : -1,\r\n      xd = x.d,\r\n      yd = y.d;\r\n\r\n    // Either 0?\r\n    if (!x.s) return new Ctor(x);\r\n    if (!y.s) throw Error(decimalError + 'Division by zero');\r\n\r\n    e = x.e - y.e;\r\n    yL = yd.length;\r\n    xL = xd.length;\r\n    q = new Ctor(sign);\r\n    qd = q.d = [];\r\n\r\n    // Result exponent may be one less than e.\r\n    for (i = 0; yd[i] == (xd[i] || 0); ) ++i;\r\n    if (yd[i] > (xd[i] || 0)) --e;\r\n\r\n    if (pr == null) {\r\n      sd = pr = Ctor.precision;\r\n    } else if (dp) {\r\n      sd = pr + (getBase10Exponent(x) - getBase10Exponent(y)) + 1;\r\n    } else {\r\n      sd = pr;\r\n    }\r\n\r\n    if (sd < 0) return new Ctor(0);\r\n\r\n    // Convert precision in number of base 10 digits to base 1e7 digits.\r\n    sd = sd / LOG_BASE + 2 | 0;\r\n    i = 0;\r\n\r\n    // divisor < 1e7\r\n    if (yL == 1) {\r\n      k = 0;\r\n      yd = yd[0];\r\n      sd++;\r\n\r\n      // k is the carry.\r\n      for (; (i < xL || k) && sd--; i++) {\r\n        t = k * BASE + (xd[i] || 0);\r\n        qd[i] = t / yd | 0;\r\n        k = t % yd | 0;\r\n      }\r\n\r\n    // divisor >= 1e7\r\n    } else {\r\n\r\n      // Normalise xd and yd so highest order digit of yd is >= BASE/2\r\n      k = BASE / (yd[0] + 1) | 0;\r\n\r\n      if (k > 1) {\r\n        yd = multiplyInteger(yd, k);\r\n        xd = multiplyInteger(xd, k);\r\n        yL = yd.length;\r\n        xL = xd.length;\r\n      }\r\n\r\n      xi = yL;\r\n      rem = xd.slice(0, yL);\r\n      remL = rem.length;\r\n\r\n      // Add zeros to make remainder as long as divisor.\r\n      for (; remL < yL;) rem[remL++] = 0;\r\n\r\n      yz = yd.slice();\r\n      yz.unshift(0);\r\n      yd0 = yd[0];\r\n\r\n      if (yd[1] >= BASE / 2) ++yd0;\r\n\r\n      do {\r\n        k = 0;\r\n\r\n        // Compare divisor and remainder.\r\n        cmp = compare(yd, rem, yL, remL);\r\n\r\n        // If divisor < remainder.\r\n        if (cmp < 0) {\r\n\r\n          // Calculate trial digit, k.\r\n          rem0 = rem[0];\r\n          if (yL != remL) rem0 = rem0 * BASE + (rem[1] || 0);\r\n\r\n          // k will be how many times the divisor goes into the current remainder.\r\n          k = rem0 / yd0 | 0;\r\n\r\n          //  Algorithm:\r\n          //  1. product = divisor * trial digit (k)\r\n          //  2. if product > remainder: product -= divisor, k--\r\n          //  3. remainder -= product\r\n          //  4. if product was < remainder at 2:\r\n          //    5. compare new remainder and divisor\r\n          //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n          if (k > 1) {\r\n            if (k >= BASE) k = BASE - 1;\r\n\r\n            // product = divisor * trial digit.\r\n            prod = multiplyInteger(yd, k);\r\n            prodL = prod.length;\r\n            remL = rem.length;\r\n\r\n            // Compare product and remainder.\r\n            cmp = compare(prod, rem, prodL, remL);\r\n\r\n            // product > remainder.\r\n            if (cmp == 1) {\r\n              k--;\r\n\r\n              // Subtract divisor from product.\r\n              subtract(prod, yL < prodL ? yz : yd, prodL);\r\n            }\r\n          } else {\r\n\r\n            // cmp is -1.\r\n            // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n            // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n            if (k == 0) cmp = k = 1;\r\n            prod = yd.slice();\r\n          }\r\n\r\n          prodL = prod.length;\r\n          if (prodL < remL) prod.unshift(0);\r\n\r\n          // Subtract product from remainder.\r\n          subtract(rem, prod, remL);\r\n\r\n          // If product was < previous remainder.\r\n          if (cmp == -1) {\r\n            remL = rem.length;\r\n\r\n            // Compare divisor and new remainder.\r\n            cmp = compare(yd, rem, yL, remL);\r\n\r\n            // If divisor < new remainder, subtract divisor from remainder.\r\n            if (cmp < 1) {\r\n              k++;\r\n\r\n              // Subtract divisor from remainder.\r\n              subtract(rem, yL < remL ? yz : yd, remL);\r\n            }\r\n          }\r\n\r\n          remL = rem.length;\r\n        } else if (cmp === 0) {\r\n          k++;\r\n          rem = [0];\r\n        }    // if cmp === 1, k will be 0\r\n\r\n        // Add the next digit, k, to the result array.\r\n        qd[i++] = k;\r\n\r\n        // Update the remainder.\r\n        if (cmp && rem[0]) {\r\n          rem[remL++] = xd[xi] || 0;\r\n        } else {\r\n          rem = [xd[xi]];\r\n          remL = 1;\r\n        }\r\n\r\n      } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n    }\r\n\r\n    // Leading zero?\r\n    if (!qd[0]) qd.shift();\r\n\r\n    q.e = e;\r\n\r\n    return round(q, dp ? pr + getBase10Exponent(q) + 1 : pr);\r\n  };\r\n})();\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x` truncated to `sd`\r\n * significant digits.\r\n *\r\n * Taylor/Maclaurin series.\r\n *\r\n * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n *\r\n * Argument reduction:\r\n *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n *   exp(x) = exp(x / 2^k)^(2^k)\r\n *\r\n * Previously, the argument was initially reduced by\r\n * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n * found to be slower than just dividing repeatedly by 32 as above.\r\n *\r\n * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n *\r\n *  exp(x) is non-terminating for any finite, non-zero x.\r\n *\r\n */\r\nfunction exp(x, sd) {\r\n  var denominator, guard, pow, sum, t, wpr,\r\n    i = 0,\r\n    k = 0,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision;\r\n\r\n  if (getBase10Exponent(x) > 16) throw Error(exponentOutOfRange + getBase10Exponent(x));\r\n\r\n  // exp(0) = 1\r\n  if (!x.s) return new Ctor(ONE);\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  t = new Ctor(0.03125);\r\n\r\n  while (x.abs().gte(0.1)) {\r\n    x = x.times(t);    // x = x / 2^5\r\n    k += 5;\r\n  }\r\n\r\n  // Estimate the precision increase necessary to ensure the first 4 rounding digits are correct.\r\n  guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n  wpr += guard;\r\n  denominator = pow = sum = new Ctor(ONE);\r\n  Ctor.precision = wpr;\r\n\r\n  for (;;) {\r\n    pow = round(pow.times(x), wpr);\r\n    denominator = denominator.times(++i);\r\n    t = sum.plus(divide(pow, denominator, wpr));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      while (k--) sum = round(sum.times(sum), wpr);\r\n      Ctor.precision = pr;\r\n      return sd == null ? (external = true, round(sum, pr)) : sum;\r\n    }\r\n\r\n    sum = t;\r\n  }\r\n}\r\n\r\n\r\n// Calculate the base 10 exponent from the base 1e7 exponent.\r\nfunction getBase10Exponent(x) {\r\n  var e = x.e * LOG_BASE,\r\n    w = x.d[0];\r\n\r\n  // Add the number of digits of the first word of the digits array.\r\n  for (; w >= 10; w /= 10) e++;\r\n  return e;\r\n}\r\n\r\n\r\nfunction getLn10(Ctor, sd, pr) {\r\n\r\n  if (sd > Ctor.LN10.sd()) {\r\n\r\n\r\n    // Reset global state in case the exception is caught.\r\n    external = true;\r\n    if (pr) Ctor.precision = pr;\r\n    throw Error(decimalError + 'LN10 precision limit exceeded');\r\n  }\r\n\r\n  return round(new Ctor(Ctor.LN10), sd);\r\n}\r\n\r\n\r\nfunction getZeroString(k) {\r\n  var zs = '';\r\n  for (; k--;) zs += '0';\r\n  return zs;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x` truncated to `sd` significant\r\n * digits.\r\n *\r\n *  ln(n) is non-terminating (n != 1)\r\n *\r\n */\r\nfunction ln(y, sd) {\r\n  var c, c0, denominator, e, numerator, sum, t, wpr, x2,\r\n    n = 1,\r\n    guard = 10,\r\n    x = y,\r\n    xd = x.d,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision;\r\n\r\n  // ln(-x) = NaN\r\n  // ln(0) = -Infinity\r\n  if (x.s < 1) throw Error(decimalError + (x.s ? 'NaN' : '-Infinity'));\r\n\r\n  // ln(1) = 0\r\n  if (x.eq(ONE)) return new Ctor(0);\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  if (x.eq(10)) {\r\n    if (sd == null) external = true;\r\n    return getLn10(Ctor, wpr);\r\n  }\r\n\r\n  wpr += guard;\r\n  Ctor.precision = wpr;\r\n  c = digitsToString(xd);\r\n  c0 = c.charAt(0);\r\n  e = getBase10Exponent(x);\r\n\r\n  if (Math.abs(e) < 1.5e15) {\r\n\r\n    // Argument reduction.\r\n    // The series converges faster the closer the argument is to 1, so using\r\n    // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n    // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n    // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n    // later be divided by this number, then separate out the power of 10 using\r\n    // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n    // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n    //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n    // max n is 6 (gives 0.7 - 1.3)\r\n    while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n      x = x.times(y);\r\n      c = digitsToString(x.d);\r\n      c0 = c.charAt(0);\r\n      n++;\r\n    }\r\n\r\n    e = getBase10Exponent(x);\r\n\r\n    if (c0 > 1) {\r\n      x = new Ctor('0.' + c);\r\n      e++;\r\n    } else {\r\n      x = new Ctor(c0 + '.' + c.slice(1));\r\n    }\r\n  } else {\r\n\r\n    // The argument reduction method above may result in overflow if the argument y is a massive\r\n    // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n    // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n    t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n    x = ln(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n\r\n    Ctor.precision = pr;\r\n    return sd == null ? (external = true, round(x, pr)) : x;\r\n  }\r\n\r\n  // x is reduced to a value near 1.\r\n\r\n  // Taylor series.\r\n  // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n  // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n  sum = numerator = x = divide(x.minus(ONE), x.plus(ONE), wpr);\r\n  x2 = round(x.times(x), wpr);\r\n  denominator = 3;\r\n\r\n  for (;;) {\r\n    numerator = round(numerator.times(x2), wpr);\r\n    t = sum.plus(divide(numerator, new Ctor(denominator), wpr));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      sum = sum.times(2);\r\n\r\n      // Reverse the argument reduction.\r\n      if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n      sum = divide(sum, new Ctor(n), wpr);\r\n\r\n      Ctor.precision = pr;\r\n      return sd == null ? (external = true, round(sum, pr)) : sum;\r\n    }\r\n\r\n    sum = t;\r\n    denominator += 2;\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Parse the value of a new Decimal `x` from string `str`.\r\n */\r\nfunction parseDecimal(x, str) {\r\n  var e, i, len;\r\n\r\n  // Decimal point?\r\n  if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n  // Exponential form?\r\n  if ((i = str.search(/e/i)) > 0) {\r\n\r\n    // Determine exponent.\r\n    if (e < 0) e = i;\r\n    e += +str.slice(i + 1);\r\n    str = str.substring(0, i);\r\n  } else if (e < 0) {\r\n\r\n    // Integer.\r\n    e = str.length;\r\n  }\r\n\r\n  // Determine leading zeros.\r\n  for (i = 0; str.charCodeAt(i) === 48;) ++i;\r\n\r\n  // Determine trailing zeros.\r\n  for (len = str.length; str.charCodeAt(len - 1) === 48;) --len;\r\n  str = str.slice(i, len);\r\n\r\n  if (str) {\r\n    len -= i;\r\n    e = e - i - 1;\r\n    x.e = mathfloor(e / LOG_BASE);\r\n    x.d = [];\r\n\r\n    // Transform base\r\n\r\n    // e is the base 10 exponent.\r\n    // i is where to slice str to get the first word of the digits array.\r\n    i = (e + 1) % LOG_BASE;\r\n    if (e < 0) i += LOG_BASE;\r\n\r\n    if (i < len) {\r\n      if (i) x.d.push(+str.slice(0, i));\r\n      for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n      str = str.slice(i);\r\n      i = LOG_BASE - str.length;\r\n    } else {\r\n      i -= len;\r\n    }\r\n\r\n    for (; i--;) str += '0';\r\n    x.d.push(+str);\r\n\r\n    if (external && (x.e > MAX_E || x.e < -MAX_E)) throw Error(exponentOutOfRange + e);\r\n  } else {\r\n\r\n    // Zero.\r\n    x.s = 0;\r\n    x.e = 0;\r\n    x.d = [0];\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Round `x` to `sd` significant digits, using rounding mode `rm` if present (truncate otherwise).\r\n */\r\n function round(x, sd, rm) {\r\n  var i, j, k, n, rd, doRound, w, xdi,\r\n    xd = x.d;\r\n\r\n  // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n  // w: the word of xd which contains the rounding digit, a base 1e7 number.\r\n  // xdi: the index of w within xd.\r\n  // n: the number of digits of w.\r\n  // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n  // they had leading zeros)\r\n  // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n  // Get the length of the first word of the digits array xd.\r\n  for (n = 1, k = xd[0]; k >= 10; k /= 10) n++;\r\n  i = sd - n;\r\n\r\n  // Is the rounding digit in the first word of xd?\r\n  if (i < 0) {\r\n    i += LOG_BASE;\r\n    j = sd;\r\n    w = xd[xdi = 0];\r\n  } else {\r\n    xdi = Math.ceil((i + 1) / LOG_BASE);\r\n    k = xd.length;\r\n    if (xdi >= k) return x;\r\n    w = k = xd[xdi];\r\n\r\n    // Get the number of digits of w.\r\n    for (n = 1; k >= 10; k /= 10) n++;\r\n\r\n    // Get the index of rd within w.\r\n    i %= LOG_BASE;\r\n\r\n    // Get the index of rd within w, adjusted for leading zeros.\r\n    // The number of leading zeros of w is given by LOG_BASE - n.\r\n    j = i - LOG_BASE + n;\r\n  }\r\n\r\n  if (rm !== void 0) {\r\n    k = mathpow(10, n - j - 1);\r\n\r\n    // Get the rounding digit at index j of w.\r\n    rd = w / k % 10 | 0;\r\n\r\n    // Are there any non-zero digits after the rounding digit?\r\n    doRound = sd < 0 || xd[xdi + 1] !== void 0 || w % k;\r\n\r\n    // The expression `w % mathpow(10, n - j - 1)` returns all the digits of w to the right of the\r\n    // digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression will give\r\n    // 714.\r\n\r\n    doRound = rm < 4\r\n      ? (rd || doRound) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n      : rd > 5 || rd == 5 && (rm == 4 || doRound || rm == 6 &&\r\n\r\n        // Check whether the digit to the left of the rounding digit is odd.\r\n        ((i > 0 ? j > 0 ? w / mathpow(10, n - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n          rm == (x.s < 0 ? 8 : 7));\r\n  }\r\n\r\n  if (sd < 1 || !xd[0]) {\r\n    if (doRound) {\r\n      k = getBase10Exponent(x);\r\n      xd.length = 1;\r\n\r\n      // Convert sd to decimal places.\r\n      sd = sd - k - 1;\r\n\r\n      // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n      xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n      x.e = mathfloor(-sd / LOG_BASE) || 0;\r\n    } else {\r\n      xd.length = 1;\r\n\r\n      // Zero.\r\n      xd[0] = x.e = x.s = 0;\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n  // Remove excess digits.\r\n  if (i == 0) {\r\n    xd.length = xdi;\r\n    k = 1;\r\n    xdi--;\r\n  } else {\r\n    xd.length = xdi + 1;\r\n    k = mathpow(10, LOG_BASE - i);\r\n\r\n    // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n    // j > 0 means i > number of leading zeros of w.\r\n    xd[xdi] = j > 0 ? (w / mathpow(10, n - j) % mathpow(10, j) | 0) * k : 0;\r\n  }\r\n\r\n  if (doRound) {\r\n    for (;;) {\r\n\r\n      // Is the digit to be rounded up in the first word of xd?\r\n      if (xdi == 0) {\r\n        if ((xd[0] += k) == BASE) {\r\n          xd[0] = 1;\r\n          ++x.e;\r\n        }\r\n\r\n        break;\r\n      } else {\r\n        xd[xdi] += k;\r\n        if (xd[xdi] != BASE) break;\r\n        xd[xdi--] = 0;\r\n        k = 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n\r\n  if (external && (x.e > MAX_E || x.e < -MAX_E)) {\r\n    throw Error(exponentOutOfRange + getBase10Exponent(x));\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\nfunction subtract(x, y) {\r\n  var d, e, i, j, k, len, xd, xe, xLTy, yd,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision;\r\n\r\n  // Return y negated if x is zero.\r\n  // Return x if y is zero and x is non-zero.\r\n  if (!x.s || !y.s) {\r\n    if (y.s) y.s = -y.s;\r\n    else y = new Ctor(x);\r\n    return external ? round(y, pr) : y;\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n\r\n  // x and y are non-zero numbers with the same sign.\r\n\r\n  e = y.e;\r\n  xe = x.e;\r\n  xd = xd.slice();\r\n  k = xe - e;\r\n\r\n  // If exponents differ...\r\n  if (k) {\r\n    xLTy = k < 0;\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      k = -k;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = xe;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Numbers with massively different exponents would result in a very high number of zeros\r\n    // needing to be prepended, but this can be avoided while still ensuring correct rounding by\r\n    // limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n    i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n    if (k > i) {\r\n      k = i;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents.\r\n    d.reverse();\r\n    for (i = k; i--;) d.push(0);\r\n    d.reverse();\r\n\r\n  // Base 1e7 exponents equal.\r\n  } else {\r\n\r\n    // Check digits to determine which is the bigger number.\r\n\r\n    i = xd.length;\r\n    len = yd.length;\r\n    xLTy = i < len;\r\n    if (xLTy) len = i;\r\n\r\n    for (i = 0; i < len; i++) {\r\n      if (xd[i] != yd[i]) {\r\n        xLTy = xd[i] < yd[i];\r\n        break;\r\n      }\r\n    }\r\n\r\n    k = 0;\r\n  }\r\n\r\n  if (xLTy) {\r\n    d = xd;\r\n    xd = yd;\r\n    yd = d;\r\n    y.s = -y.s;\r\n  }\r\n\r\n  len = xd.length;\r\n\r\n  // Append zeros to xd if shorter.\r\n  // Don't add zeros to yd if shorter as subtraction only needs to start at yd length.\r\n  for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n  // Subtract yd from xd.\r\n  for (i = yd.length; i > k;) {\r\n    if (xd[--i] < yd[i]) {\r\n      for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n      --xd[j];\r\n      xd[i] += BASE;\r\n    }\r\n\r\n    xd[i] -= yd[i];\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; xd[--len] === 0;) xd.pop();\r\n\r\n  // Remove leading zeros and adjust exponent accordingly.\r\n  for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n  // Zero?\r\n  if (!xd[0]) return new Ctor(0);\r\n\r\n  y.d = xd;\r\n  y.e = e;\r\n\r\n  //return external && xd.length >= pr / LOG_BASE ? round(y, pr) : y;\r\n  return external ? round(y, pr) : y;\r\n}\r\n\r\n\r\nfunction toString(x, isExp, sd) {\r\n  var k,\r\n    e = getBase10Exponent(x),\r\n    str = digitsToString(x.d),\r\n    len = str.length;\r\n\r\n  if (isExp) {\r\n    if (sd && (k = sd - len) > 0) {\r\n      str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n    } else if (len > 1) {\r\n      str = str.charAt(0) + '.' + str.slice(1);\r\n    }\r\n\r\n    str = str + (e < 0 ? 'e' : 'e+') + e;\r\n  } else if (e < 0) {\r\n    str = '0.' + getZeroString(-e - 1) + str;\r\n    if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n  } else if (e >= len) {\r\n    str += getZeroString(e + 1 - len);\r\n    if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n  } else {\r\n    if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n    if (sd && (k = sd - len) > 0) {\r\n      if (e + 1 === len) str += '.';\r\n      str += getZeroString(k);\r\n    }\r\n  }\r\n\r\n  return x.s < 0 ? '-' + str : str;\r\n}\r\n\r\n\r\n// Does not strip trailing zeros.\r\nfunction truncate(arr, len) {\r\n  if (arr.length > len) {\r\n    arr.length = len;\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n// Decimal methods\r\n\r\n\r\n/*\r\n *  clone\r\n *  config/set\r\n */\r\n\r\n\r\n/*\r\n * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n * constructor.\r\n *\r\n */\r\nfunction clone(obj) {\r\n  var i, p, ps;\r\n\r\n  /*\r\n   * The Decimal constructor and exported function.\r\n   * Return a new Decimal instance.\r\n   *\r\n   * value {number|string|Decimal} A numeric value.\r\n   *\r\n   */\r\n  function Decimal(value) {\r\n    var x = this;\r\n\r\n    // Decimal called without new.\r\n    if (!(x instanceof Decimal)) return new Decimal(value);\r\n\r\n    // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n    // which points to Object.\r\n    x.constructor = Decimal;\r\n\r\n    // Duplicate.\r\n    if (value instanceof Decimal) {\r\n      x.s = value.s;\r\n      x.e = value.e;\r\n      x.d = (value = value.d) ? value.slice() : value;\r\n      return;\r\n    }\r\n\r\n    if (typeof value === 'number') {\r\n\r\n      // Reject Infinity/NaN.\r\n      if (value * 0 !== 0) {\r\n        throw Error(invalidArgument + value);\r\n      }\r\n\r\n      if (value > 0) {\r\n        x.s = 1;\r\n      } else if (value < 0) {\r\n        value = -value;\r\n        x.s = -1;\r\n      } else {\r\n        x.s = 0;\r\n        x.e = 0;\r\n        x.d = [0];\r\n        return;\r\n      }\r\n\r\n      // Fast path for small integers.\r\n      if (value === ~~value && value < 1e7) {\r\n        x.e = 0;\r\n        x.d = [value];\r\n        return;\r\n      }\r\n\r\n      return parseDecimal(x, value.toString());\r\n    } else if (typeof value !== 'string') {\r\n      throw Error(invalidArgument + value);\r\n    }\r\n\r\n    // Minus sign?\r\n    if (value.charCodeAt(0) === 45) {\r\n      value = value.slice(1);\r\n      x.s = -1;\r\n    } else {\r\n      x.s = 1;\r\n    }\r\n\r\n    if (isDecimal.test(value)) parseDecimal(x, value);\r\n    else throw Error(invalidArgument + value);\r\n  }\r\n\r\n  Decimal.prototype = P;\r\n\r\n  Decimal.ROUND_UP = 0;\r\n  Decimal.ROUND_DOWN = 1;\r\n  Decimal.ROUND_CEIL = 2;\r\n  Decimal.ROUND_FLOOR = 3;\r\n  Decimal.ROUND_HALF_UP = 4;\r\n  Decimal.ROUND_HALF_DOWN = 5;\r\n  Decimal.ROUND_HALF_EVEN = 6;\r\n  Decimal.ROUND_HALF_CEIL = 7;\r\n  Decimal.ROUND_HALF_FLOOR = 8;\r\n\r\n  Decimal.clone = clone;\r\n  Decimal.config = Decimal.set = config;\r\n\r\n  if (obj === void 0) obj = {};\r\n  if (obj) {\r\n    ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'LN10'];\r\n    for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n  }\r\n\r\n  Decimal.config(obj);\r\n\r\n  return Decimal;\r\n}\r\n\r\n\r\n/*\r\n * Configure global settings for a Decimal constructor.\r\n *\r\n * `obj` is an object with one or more of the following properties,\r\n *\r\n *   precision  {number}\r\n *   rounding   {number}\r\n *   toExpNeg   {number}\r\n *   toExpPos   {number}\r\n *\r\n * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n *\r\n */\r\nfunction config(obj) {\r\n  if (!obj || typeof obj !== 'object') {\r\n    throw Error(decimalError + 'Object expected');\r\n  }\r\n  var i, p, v,\r\n    ps = [\r\n      'precision', 1, MAX_DIGITS,\r\n      'rounding', 0, 8,\r\n      'toExpNeg', -1 / 0, 0,\r\n      'toExpPos', 0, 1 / 0\r\n    ];\r\n\r\n  for (i = 0; i < ps.length; i += 3) {\r\n    if ((v = obj[p = ps[i]]) !== void 0) {\r\n      if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n      else throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n  }\r\n\r\n  if ((v = obj[p = 'LN10']) !== void 0) {\r\n      if (v == Math.LN10) this[p] = new this(v);\r\n      else throw Error(invalidArgument + p + ': ' + v);\r\n  }\r\n\r\n  return this;\r\n}\r\n\r\n\r\n// Create and configure initial Decimal constructor.\r\nexport var Decimal = clone(defaults);\r\n\r\n// Internal constant.\r\nONE = new Decimal(1);\r\n\r\nexport default Decimal;\r\n","import { Decimal } from \"./Decimal\";\n\n/**\n * @name diff\n * @description Return the value of first decimal minus second decimal.\n * @param {number|string|Decimal} alpha\n * @param {number|string|Decimal} beta\n * @returns {number}\n */\nexport function diff(alpha, beta) {\n  const psi = new Decimal(alpha);\n  const omega = new Decimal(beta);\n  const result = psi.minus(omega);\n  return result.toNumber();\n}\n","import { Decimal } from \"./Decimal\";\n\n/**\n * @name divide\n * @description Return the value of first decimal divided by second decimal.\n * @param {number|string|Decimal} alpha\n * @param {number|string|Decimal} beta\n * @returns {number}\n */\nexport function divide(alpha, beta) {\n  const psi = new Decimal(alpha);\n  const omega = new Decimal(beta);\n  const result = psi.dividedBy(omega);\n  return result.toNumber();\n}\n","import { Decimal } from \"./Decimal\";\n\n/**\n * @name multiply\n * @description Return the value of first decimal multiplied by second decimal.\n * @param {number|string|Decimal} alpha\n * @param {number|string|Decimal} beta\n * @returns {number}\n */\nexport function multiply(alpha, beta) {\n  const psi = new Decimal(alpha);\n  const omega = new Decimal(beta);\n  const result = psi.times(omega);\n  return result.toNumber();\n}\n","import { Decimal } from \"./Decimal\";\n\n/**\n * @name sum\n * @description Return the value of first decimal plus second decimal.\n * @param {number|string|Decimal} alpha\n * @param {number|string|Decimal} beta\n * @returns {number}\n */\nexport function sum(alpha, beta) {\n  const psi = new Decimal(alpha);\n  const omega = new Decimal(beta);\n  const result = psi.plus(omega);\n  return result.toNumber();\n}\n"],"names":["ONE","external","decimalError","invalidArgument","exponentOutOfRange","mathfloor","Math","floor","mathpow","pow","isDecimal","BASE","MAX_E","MAX_SAFE_INTEGER","P","add","x","y","carry","d","e","i","k","len","xd","yd","Ctor","constructor","pr","precision","s","round","slice","length","ceil","reverse","push","unshift","pop","checkInt32","min","max","Error","digitsToString","ws","indexOfLastWord","str","w","getZeroString","absoluteValue","abs","this","comparedTo","cmp","j","xdL","ydL","decimalPlaces","dp","dividedBy","div","divide","dividedToIntegerBy","idiv","equals","eq","exponent","getBase10Exponent","greaterThan","gt","greaterThanOrEqualTo","gte","isInteger","isint","isNegative","isneg","isPositive","ispos","isZero","lessThan","lt","lessThanOrEqualTo","lte","logarithm","log","base","r","wpr","ln","minus","sub","subtract","modulo","mod","q","times","naturalExponential","exp","naturalLogarithm","negated","neg","plus","sd","z","squareRoot","sqrt","n","t","toExponential","indexOf","toString","mul","rL","shift","toDecimalPlaces","todp","rm","rounding","toFixed","toInteger","toint","toNumber","toPower","sign","yIsInt","yn","truncate","toPrecision","toExpNeg","toExpPos","toSignificantDigits","tosd","valueOf","val","toJSON","Symbol","for","multiplyInteger","temp","compare","a","b","aL","bL","prod","prodL","qd","rem","remL","rem0","xi","xL","yd0","yL","yz","denominator","sum","LN10","getLn10","zs","c","c0","numerator","x2","charAt","parseDecimal","replace","search","substring","charCodeAt","rd","doRound","xdi","xe","xLTy","isExp","arr","config","obj","p","v","ps","Decimal","clone","value","test","prototype","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","set","hasOwnProperty","diff","alpha","beta","psi","omega","multiply"],"mappings":"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"}